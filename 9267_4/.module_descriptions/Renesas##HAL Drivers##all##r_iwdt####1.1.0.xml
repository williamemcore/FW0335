<?xml version="1.0" ?>
<synergyModuleDescription>
    <config id="config.driver.iwdt" path="ssp_cfg/driver/r_iwdt_cfg.h" version="0">
        <property id="config.driver.iwdt.param_checking_enable" display="Parameter Checking" default="config.driver.iwdt.param_checking_enable.bsp">
            <option id="config.driver.iwdt.param_checking_enable.bsp" display="Default (BSP)" value="BSP_CFG_PARAM_CHECKING_ENABLE" />
            <option id="config.driver.iwdt.param_checking_enable.enabled" display="Enabled" value="(1)" />
            <option id="config.driver.iwdt.param_checking_enable.disabled" display="Disabled" value="(0)" />
        </property>
        <content>
            #define IWDT_CFG_PARAM_CHECKING_ENABLE (${config.driver.iwdt.param_checking_enable})
        </content>
    </config>
    <module id="module.driver.watchdog_on_iwdt" config="config.driver.iwdt" display="Driver|Monitoring|${module.driver.watchdog.name} Watchdog Driver on r_iwdt" version="0">
        <constraint display="Unique name required for each instance">
            "${interface.driver.wdt.${module.driver.watchdog.name}}" === "1"
        </constraint>
        <constraint display="Driver used multiple times. Can only be used once.">
            "${interface.driver.wdt_on_iwdt}" === "1"
        </constraint>
        <provides interface="interface.driver.wdt" />
        <provides interface="interface.driver.wdt_on_iwdt" />
        <provides interface="interface.driver.wdt.${module.driver.watchdog.name}" />
        <property default="g_wdt${_instance}" display="Name" id="module.driver.watchdog.name">
            <constraint display="Name must be a valid C symbol">testSymbol("${module.driver.watchdog.name}")</constraint>
        </property>
        <property display="NMI callback" id="module.driver.watchdog.nmi_callback" default="NULL">
            <constraint display="Name must be a valid C symbol">testSymbol("${module.driver.watchdog.nmi_callback}")</constraint>
        </property>
        <header>
            /** WDT on IWDT Instance. */
            extern const wdt_instance_t ${module.driver.watchdog.name};
            #ifdef ${module.driver.watchdog.nmi_callback}
			#define WATCHDOG_ON_IWDT_CALLBACK_USED (0)
			#else
			#define WATCHDOG_ON_IWDT_CALLBACK_USED (1)
			#endif
			#if WATCHDOG_ON_IWDT_CALLBACK_USED
			void ${module.driver.watchdog.nmi_callback}(wdt_callback_args_t * p_args);
			#endif
        </header>
        <includes>
            #include "r_iwdt.h"
            #include "r_wdt_api.h"
        </includes>
        <declarations>
			#if WATCHDOG_ON_IWDT_CALLBACK_USED
			#if defined(__ICCARM__)
			#define ${module.driver.watchdog.nmi_callback}_WEAK_ATTRIBUTE
			#pragma weak ${module.driver.watchdog.nmi_callback}                            = ${module.driver.watchdog.nmi_callback}_internal
			#elif defined(__GNUC__)
			#define ${module.driver.watchdog.nmi_callback}_WEAK_ATTRIBUTE       __attribute__ ((weak, alias("${module.driver.watchdog.nmi_callback}_internal")))
			#endif
			void ${module.driver.watchdog.nmi_callback}(wdt_callback_args_t * p_args) ${module.driver.watchdog.nmi_callback}_WEAK_ATTRIBUTE;
			#endif

            static wdt_ctrl_t ${module.driver.watchdog.name}_ctrl;

            static const wdt_cfg_t ${module.driver.watchdog.name}_cfg =
            {
                .p_callback = ${module.driver.watchdog.nmi_callback},
            };

/* Instance structure to use this module. */
const wdt_instance_t ${module.driver.watchdog.name} =
{
    .p_ctrl        = &amp;${module.driver.watchdog.name}_ctrl,
    .p_cfg         = &amp;${module.driver.watchdog.name}_cfg,
    .p_api         = &amp;g_wdt_on_iwdt
};

#if WATCHDOG_ON_IWDT_CALLBACK_USED
/*******************************************************************************************************************//**
 * @brief      This is a weak example callback function.  It should be overridden by defining a user callback function
 *             with the prototype below.
 *               - void ${module.driver.watchdog.nmi_callback}(wdt_callback_args_t * p_args)
 *
 * @param[in]  p_args  Callback arguments used to identify what caused the callback.
 **********************************************************************************************************************/
void ${module.driver.watchdog.nmi_callback}_internal(wdt_callback_args_t * p_args);
void ${module.driver.watchdog.nmi_callback}_internal(wdt_callback_args_t * p_args)
{
	/** Do nothing. */
	SSP_PARAMETER_NOT_USED(p_args);
}
#endif
        </declarations>
        <functions>
        </functions>
    </module>
</synergyModuleDescription>
