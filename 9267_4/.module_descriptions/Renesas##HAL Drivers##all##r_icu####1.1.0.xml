<?xml version="1.0" ?>
<synergyModuleDescription>
    <config id="config.driver.icu" path="ssp_cfg/driver/r_icu_cfg.h" version="0">
        <property default="config.driver.icu.param_checking_enable.bsp" display="Parameter Checking" id="config.driver.icu.param_checking_enable">
            <option display="Default (BSP)" id="config.driver.icu.param_checking_enable.bsp" value="(BSP_CFG_PARAM_CHECKING_ENABLE)"/>
            <option display="Enabled" id="config.driver.icu.param_checking_enable.enabled" value="(1)"/>
            <option display="Disabled" id="config.driver.icu.param_checking_enable.disabled" value="(0)"/>
        </property>
        <content>#define ICU_EXTERNAL_IRQ_CFG_PARAM_CHECKING_ENABLE ${config.driver.icu.param_checking_enable}
</content>
    </config>
    <module config="config.driver.icu" display="Driver|Input|${module.driver.external_irq.name} External IRQ Driver on r_icu" id="module.driver.external_irq_on_icu" version="1">
        <constraint display="Module instances must have unique names">
            "${interface.driver.external_irq.${module.driver.external_irq.name}}" === "1"
        </constraint>
        <constraint display="Requires IRQ enabled on ICU IRQ${module.driver.external_irq.channel}">
            "${board.icu.icu.irq${module.driver.external_irq.channel}}" != "board.icu.common.irq.disabled"
        </constraint>
        <provides interface="interface.driver.external_irq" />
        <provides interface="interface.driver.external_irq_on_icu" />
        <provides interface="interface.driver.external_irq.${module.driver.external_irq.name}" />
        <provides interface="interface.driver.icu.${module.driver.external_irq.name}" />
        <property default="g_external_irq${_instance}" display="Name" id="module.driver.external_irq.name">
            <constraint display="Name must be a valid C symbol">testSymbol("${module.driver.external_irq.name}")</constraint>
        </property>
        <property default="0" display="Channel" id="module.driver.external_irq.channel">
            <constraint display="Value must be an integer between 0 and 15">testInteger("${module.driver.external_irq.channel}")  &amp;&amp; ("${module.driver.external_irq.channel}" &gt;= 0) &amp;&amp; ("${module.driver.external_irq.channel}" &lt;= 15)</constraint>
           </property>
        <property default="module.driver.external_irq.trigger.trig_rising" display="Trigger" id="module.driver.external_irq.trigger">
            <option display="Falling" id="module.driver.external_irq.trigger.trig_falling" value="EXTERNAL_IRQ_TRIG_FALLING"/>
            <option display="Rising" id="module.driver.external_irq.trigger.trig_rising" value="EXTERNAL_IRQ_TRIG_RISING"/>
            <option display="Both Edges" id="module.driver.external_irq.trigger.trig_both_edge" value="EXTERNAL_IRQ_TRIG_BOTH_EDGE"/>
            <option display="Low Level" id="module.driver.external_irq.trigger.trig_lowlev" value="EXTERNAL_IRQ_TRIG_LEVEL_LOW"/>
        </property>
        <property default="module.driver.external_irq.filter_enable.false" display="Digital Filtering" id="module.driver.external_irq.filter_enable">
            <option display="Enabled" id="module.driver.external_irq.filter_enable.true" value="true"/>
            <option display="Disabled" id="module.driver.external_irq.filter_enable.false" value="false"/>
        </property>
        <property default="module.driver.external_irq.pclk_div.pclk_div_by_64" display="Digital Filtering Sample Clock (Only valid when Digital Filtering is Enabled)" id="module.driver.external_irq.pclk_div">
            <option display="PCLK / 1" id="module.driver.external_irq.pclk_div.pclk_div_by_1" value="EXTERNAL_IRQ_PCLK_DIV_BY_1"/>
            <option display="PCLK / 8" id="module.driver.external_irq.pclk_div.pclk_div_by_8" value="EXTERNAL_IRQ_PCLK_DIV_BY_8"/>
            <option display="PCLK / 32" id="module.driver.external_irq.pclk_div.pclk_div_by_32" value="EXTERNAL_IRQ_PCLK_DIV_BY_32"/>
            <option display="PCLK / 64" id="module.driver.external_irq.pclk_div.pclk_div_by_64" value="EXTERNAL_IRQ_PCLK_DIV_BY_64"/>
        </property>
        <property default="module.driver.external_irq.interrupt_enable.true" display="Interrupt enabled after initialization" id="module.driver.external_irq.interrupt_enable">
            <option display="True" id="module.driver.external_irq.interrupt_enable.true" value="true"/>
            <option display="False" id="module.driver.external_irq.interrupt_enable.false" value="false"/>
        </property>
        <property default="NULL" display="Callback" id="module.driver.external_irq.p_callback">
            <constraint display="Name must be a valid C symbol">testSymbol("${module.driver.external_irq.p_callback}")</constraint>
        </property>
        <interrupt node="board.icu.icu.irq${module.driver.external_irq.channel}" />
        <header>
            /* External IRQ on ICU Instance. */
            extern const external_irq_instance_t ${module.driver.external_irq.name};
#ifdef ${module.driver.external_irq.p_callback}
#define EXTERNAL_IRQ_ON_ICU_CALLBACK_USED_${module.driver.external_irq.name} (0)
#else
#define EXTERNAL_IRQ_ON_ICU_CALLBACK_USED_${module.driver.external_irq.name} (1)
#endif
#if EXTERNAL_IRQ_ON_ICU_CALLBACK_USED_${module.driver.external_irq.name}
void ${module.driver.external_irq.p_callback}(external_irq_callback_args_t * p_args);
#endif
        </header>
        <includes>#include &quot;r_icu.h&quot;
#include &quot;r_external_irq_api.h&quot;</includes>
        <declarations>
#if EXTERNAL_IRQ_ON_ICU_CALLBACK_USED_${module.driver.external_irq.name}
#if defined(__ICCARM__)
#define ${module.driver.external_irq.p_callback}_WEAK_ATTRIBUTE
#pragma weak ${module.driver.external_irq.p_callback}                            = ${module.driver.external_irq.p_callback}_internal
#elif defined(__GNUC__)
#define ${module.driver.external_irq.p_callback}_WEAK_ATTRIBUTE       __attribute__ ((weak, alias("${module.driver.external_irq.p_callback}_internal")))
#endif
void ${module.driver.external_irq.p_callback}(external_irq_callback_args_t * p_args) ${module.driver.external_irq.p_callback}_WEAK_ATTRIBUTE;
#endif
static external_irq_ctrl_t ${module.driver.external_irq.name}_ctrl;
static const external_irq_cfg_t ${module.driver.external_irq.name}_cfg =
{
    .channel             = ${module.driver.external_irq.channel},
    .trigger             = ${module.driver.external_irq.trigger},
    .filter_enable       = ${module.driver.external_irq.filter_enable},
    .pclk_div            = ${module.driver.external_irq.pclk_div},
    .autostart           = ${module.driver.external_irq.interrupt_enable},
    .p_callback          = ${module.driver.external_irq.p_callback},
    .p_context           = &amp;${module.driver.external_irq.name},
    .p_extend            = NULL
};
/* Instance structure to use this module. */
const external_irq_instance_t ${module.driver.external_irq.name} = 
{
    .p_ctrl        = &amp;${module.driver.external_irq.name}_ctrl,
    .p_cfg         = &amp;${module.driver.external_irq.name}_cfg,
    .p_api         = &amp;g_external_irq_on_icu
};

#if EXTERNAL_IRQ_ON_ICU_CALLBACK_USED_${module.driver.external_irq.name}
/*******************************************************************************************************************//**
 * @brief      This is a weak example callback function.  It should be overridden by defining a user callback function 
 *             with the prototype below.
 *               - void ${module.driver.external_irq.p_callback}(external_irq_callback_args_t * p_args)
 *
 * @param[in]  p_args  Callback arguments used to identify what caused the callback.
 **********************************************************************************************************************/
void ${module.driver.external_irq.p_callback}_internal(external_irq_callback_args_t * p_args);
void ${module.driver.external_irq.p_callback}_internal(external_irq_callback_args_t * p_args)
{
	/** Do nothing. */
	SSP_PARAMETER_NOT_USED(p_args);
}
#endif
</declarations>
    </module>
</synergyModuleDescription>
