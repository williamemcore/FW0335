<?xml version="1.0" ?>
<synergyModuleDescription>

   <!-- Sd/MMC XML START here-->

	<config id="config.driver.sdmmc" path="ssp_cfg/driver/r_sdmmc_cfg.h" version="0">
		<property default="config.driver.sdmmc.param_checking_enable.bsp" display="Parameter Checking Enable" id="config.driver.sdmmc.param_checking_enable">
			<option display="Default (BSP)" id="config.driver.sdmmc.param_checking_enable.bsp" value="(BSP_CFG_PARAM_CHECKING_ENABLE)"/>
			<option display="Enabled" id="config.driver.sdmmc.param_checking_enable.enabled" value="(1)"/>
			<option display="Disabled" id="config.driver.sdmmc.param_checking_enable.disabled" value="(0)"/>
		</property>
		<content>#define SDMMC_CFG_PARAM_CHECKING_ENABLE ${config.driver.sdmmc.param_checking_enable}
</content>
	</config>
	<module config="config.driver.sdmmc" display="Driver|Storage|${module.driver.sdmmc.name} SD/MMC Driver on r_sdmmc" id="module.driver.sdmmc_on_sdmmc" version="1">
        <constraint display="Driver instances must have unique names">
            "${interface.driver.sdmmc.${module.driver.sdmmc.name}}" === "1"
        </constraint>
        <constraint display="Requires SDMMC${module.driver.sdmmc.channel} Access Interrupt (ACCS) enabled">
            "${board.icu.sdhimmc.sdhimmc${module.driver.sdmmc.channel}.accs}" != "board.icu.common.irq.disabled"
        </constraint>
		<requires id="module.driver.sdmmc_on_sdmmc.requires.transfer" interface="interface.driver.transfer" display="Add Transfer Driver (DMAC or DTC)">
		</requires>
        <provides interface="interface.driver.sdmmc" />
        <provides interface="interface.driver.sdmmc_on_sdmmc" />
		<provides interface="interface.driver.sdmmc.${module.driver.sdmmc.name}" />
        <property default="g_sdmmc${_instance}" display="Name" id="module.driver.sdmmc.name">
            <constraint display="Name must be a valid C symbol">testSymbol("${module.driver.sdmmc.name}")</constraint>
        </property>
        <property default="1" display="Channel" id="module.driver.sdmmc.channel">
            <constraint display="Value must be a non-negative integer">testInteger("${module.driver.sdmmc.channel}")  &amp;&amp; (("${module.driver.sdmmc.channel}" &gt;= 0) &amp;&amp; ("${module.driver.sdmmc.channel}" &lt; 2))</constraint>
           </property>	
		<property default="module.driver.sdmmc.media_type.media_type_embedded" display="Media Type" id="module.driver.sdmmc.media_type">
			<option display="Embedded" id="module.driver.sdmmc.media_type.media_type_embedded" value="SDMMC_MEDIA_TYPE_EMBEDDED"/>
			<option display="Card" id="module.driver.sdmmc.media_type.media_type_card" value="SDMMC_MEDIA_TYPE_CARD"/>
		</property>
		<property default="module.driver.sdmmc.bus_width.bus_width_4_bits" display="Bus Width" id="module.driver.sdmmc.bus_width">
			<option display="1 Bit" id="module.driver.sdmmc.bus_width.bus_width_1_bit" value="SDMMC_BUS_WIDTH_1_BIT"/>
			<option display="4 Bits" id="module.driver.sdmmc.bus_width.bus_width_4_bits" value="SDMMC_BUS_WIDTH_4_BITS"/>
			<option display="8 Bits" id="module.driver.sdmmc.bus_width.bus_width_8_bits" value="SDMMC_BUS_WIDTH_8_BITS"/>
		</property>
        <property id="module.driver.sdmmc.lowerleveltransfername" display="Lower Level Transfer Name (required)" default="g_transfer0">
            <constraint display="Name must be a valid C symbol">testSymbol("${module.driver.sdmmc.lowerleveltransfername}")</constraint>
        </property>
        <property default="NULL" display="Callback" id="module.driver.sdmmc.p_callback">
            <constraint display="Name must be a valid C symbol">testSymbol("${module.driver.sdmmc.p_callback}")</constraint>
        </property>

        <interrupt node="board.icu.sdhimmc.sdhimmc${module.driver.sdmmc.channel}.accs" />
        <interrupt node="board.icu.sdhimmc.sdhimmc${module.driver.sdmmc.channel}.card" />
        <interrupt node="board.icu.sdhimmc.sdhimmc${module.driver.sdmmc.channel}.dma_req" />
		<header>
            /** SDMMC on SDMMC Instance. */
			extern const sdmmc_instance_t ${module.driver.sdmmc.name};
#ifdef ${module.driver.sdmmc.p_callback}
#define SDMMC_ON_SDMMC_CALLBACK_USED_${module.driver.sdmmc.name} (0)
#else
#define SDMMC_ON_SDMMC_CALLBACK_USED_${module.driver.sdmmc.name} (1)
#endif
#if SDMMC_ON_SDMMC_CALLBACK_USED_${module.driver.sdmmc.name}
void ${module.driver.sdmmc.p_callback}(sdmmc_callback_args_t * p_args);
#endif			
		</header>
		<includes>#include &quot;r_sdmmc.h&quot;
#include &quot;r_sdmmc_api.h&quot;</includes>
		<declarations>sdmmc_ctrl_t ${module.driver.sdmmc.name}_ctrl;
#ifdef ${module.driver.sdmmc.lowerleveltransfername}
#define SDMMC_TRANSFER${module.driver.sdmmc.channel} (${module.driver.sdmmc.lowerleveltransfername})
#else
#define SDMMC_TRANSFER${module.driver.sdmmc.channel} (&amp;${module.driver.sdmmc.lowerleveltransfername})
#endif
sdmmc_cfg_t ${module.driver.sdmmc.name}_cfg =
{
    .hw.media_type          = ${module.driver.sdmmc.media_type},
    .hw.bus_width           = ${module.driver.sdmmc.bus_width},
    .hw.channel             = ${module.driver.sdmmc.channel},
	.p_callback             = ${module.driver.sdmmc.p_callback},
	.p_lower_lvl_transfer   = SDMMC_TRANSFER${module.driver.sdmmc.channel},
    .p_extend               = NULL,
};
/* Instance structure to use this module. */
const sdmmc_instance_t ${module.driver.sdmmc.name} = 
{
    .p_ctrl        = &amp;${module.driver.sdmmc.name}_ctrl,
    .p_cfg         = &amp;${module.driver.sdmmc.name}_cfg,
    .p_api         = &amp;g_sdmmc_on_sdmmc
};




</declarations>
	</module>
<!-- SDIO XML START here-->

	<config id="config.driver.sdio" path="ssp_cfg/driver/r_sdmmc_cfg.h" version="0">
		<property default="config.driver.sdmmc.param_checking_enable.bsp" display="Parameter Checking Enable" id="config.driver.sdmmc.param_checking_enable">
			<option display="Default (BSP)" id="config.driver.sdmmc.param_checking_enable.bsp" value="(BSP_CFG_PARAM_CHECKING_ENABLE)"/>
			<option display="Enabled" id="config.driver.sdmmc.param_checking_enable.enabled" value="(1)"/>
			<option display="Disabled" id="config.driver.sdmmc.param_checking_enable.disabled" value="(0)"/>
		</property>
		<content>#define SDMMC_CFG_PARAM_CHECKING_ENABLE ${config.driver.sdmmc.param_checking_enable}
</content>
	</config>
	<module config="config.driver.sdio" display="Driver|Connectivity|${module.driver.sdio.name} SDIO Driver on r_sdmmc" id="module.driver.sdio_on_sdmmc" version="1">
	     <constraint display="Only one driver instance is allowed per SDMMC channel">
            "${interface.driver.sdmmc.${module.driver.sdio.channel}}" === "1"
        </constraint>
        <constraint display="Driver instances must have unique names">
            "${interface.driver.sdmmc.${module.driver.sdio.name}}" === "1"
        </constraint>
        <constraint display="Requires SDIO${module.driver.sdio.channel} Access Interrupt (ACCS) enabled">
            "${board.icu.sdhimmc.sdhimmc${module.driver.sdio.channel}.accs}" != "board.icu.common.irq.disabled"
        </constraint>
        <constraint display="Requires SDIO${module.driver.sdio.channel} SDIO Interrupt (SDIO) enabled">
            "${board.icu.sdhimmc.sdhimmc${module.driver.sdio.channel}.sdio}" != "board.icu.common.irq.disabled"
        </constraint>
		<requires id="module.driver.sdmmc_on_sdmmc.requires.transfer" interface="interface.driver.transfer" display="Add Transfer Driver (DMAC or DTC)">
		</requires>
		<provides interface="interface.driver.sdmmc.${module.driver.sdio.name}" />
        <provides interface="interface.driver.sdmmc.${module.driver.sdio.channel}" />
        <property default="g_sdio" display="Name" id="module.driver.sdio.name">
            <constraint display="Name must be a valid C symbol">testSymbol("${module.driver.sdio.name}")</constraint>
        </property>
        <property default="0" display="Channel" id="module.driver.sdio.channel">
            <constraint display="Value must be a non-negative integer">testInteger("${module.driver.sdio.channel}")  &amp;&amp; (("${module.driver.sdio.channel}" &gt;= 0) &amp;&amp; ("${module.driver.sdio.channel}" &lt; 2))</constraint>
           </property>	
		<property default="module.driver.sdio.media_type.media_type_card" display="Media Type" id="module.driver.sdio.media_type">
			<option display="Card" id="module.driver.sdio.media_type.media_type_card" value="SDMMC_MEDIA_TYPE_CARD"/>
		</property>
		<property default="module.driver.sdio.bus_width.bus_width_4_bits" display="Bus Width" id="module.driver.sdio.bus_width">
			<option display="1 Bit" id="module.driver.sdio.bus_width.bus_width_1_bit" value="SDMMC_BUS_WIDTH_1_BIT"/>
			<option display="4 Bits" id="module.driver.sdio.bus_width.bus_width_4_bits" value="SDMMC_BUS_WIDTH_4_BITS"/>
		</property>
        <property id="module.driver.sdio.lowerleveltransfername" display="Lower Level Transfer Name (optional)" default="NULL">
            <constraint display="Name must be a valid C symbol">testSymbol("${module.driver.sdio.lowerleveltransfername}")</constraint>
        </property>
        <property default="NULL" display="Callback" id="module.driver.sdio.p_callback">
            <constraint display="Name must be a valid C symbol">testSymbol("${module.driver.sdio.p_callback}")</constraint>
        </property>

        <interrupt node="board.icu.sdhimmc.sdhimmc${module.driver.sdio.channel}.accs" />
        <interrupt node="board.icu.sdhimmc.sdhimmc${module.driver.sdio.channel}.card" />
        <interrupt node="board.icu.sdhimmc.sdhimmc${module.driver.sdio.channel}.sdio" />
        <interrupt node="board.icu.sdhimmc.sdhimmc${module.driver.sdio.channel}.dma_req" />
		
		<header>
            /** SDIO on SDMMC Instance. */
			extern const sdmmc_instance_t ${module.driver.sdio.name};
#ifdef ${module.driver.sdio.p_callback}
#define SDIO_ON_SDMMC_CALLBACK_USED_${module.driver.sdio.name} (0)
#else
#define SDIO_ON_SDMMC_CALLBACK_USED_${module.driver.sdio.name} (1)
#endif
#if SDIO_ON_SDMMC_CALLBACK_USED_${module.driver.sdio.name}
void ${module.driver.sdio.p_callback}(sdmmc_callback_args_t * p_args);
#endif			
		</header>
		<includes>#include &quot;r_sdmmc.h&quot;
#include &quot;r_sdmmc_api.h&quot;</includes>
		<declarations>sdmmc_ctrl_t ${module.driver.sdio.name}_ctrl;
#ifdef ${module.driver.sdio.lowerleveltransfername}
#define SDIO_TRANSFER${module.driver.sdio.channel} (${module.driver.sdio.lowerleveltransfername})
#else
#define SDIO_TRANSFER${module.driver.sdio.channel} (&amp;${module.driver.sdio.lowerleveltransfername})
#endif
sdmmc_cfg_t ${module.driver.sdio.name}_cfg =
{
    .hw.bus_width           = ${module.driver.sdio.bus_width},
    .hw.media_type          = ${module.driver.sdio.media_type},
    .hw.channel             = ${module.driver.sdio.channel},
	.p_callback             = ${module.driver.sdio.p_callback},
	.p_lower_lvl_transfer   = SDIO_TRANSFER${module.driver.sdio.channel},
    .p_extend               = NULL,
};
/* Instance structure to use this module. */
const sdmmc_instance_t ${module.driver.sdio.name} = 
{
    .p_ctrl        = &amp;${module.driver.sdio.name}_ctrl,
    .p_cfg         = &amp;${module.driver.sdio.name}_cfg,
    .p_api         = &amp;g_sdmmc_on_sdmmc
};




</declarations>
	</module>	
</synergyModuleDescription>
