<?xml version="1.0" ?>
<synergyModuleDescription>
	<config id="config.driver.sci_i2c" path="ssp_cfg/driver/r_sci_i2c_cfg.h" version="0">
		<property default="config.driver.sci_i2c.param_checking_enable.bsp" display="Parameter Checking" id="config.driver.sci_i2c.param_checking_enable">
		    <option display="Default (BSP)" id="config.driver.sci_i2c.param_checking_enable.bsp" value="(BSP_CFG_PARAM_CHECKING_ENABLE)"/>
			<option display="Enabled" id="config.driver.sci_i2c.param_checking_enable.enabled" value="(1)"/>
			<option display="Disabled" id="config.driver.sci_i2c.param_checking_enable.disabled" value="(0)"/>
		</property>
		<content>#define SCI_SIIC_CFG_PREREQUISITE_CHECKING_ENABLE 1
#define SCI_SIIC_CFG_PARAM_CHECKING_ENABLE ${config.driver.sci_i2c.param_checking_enable}
</content>
	</config>
	<module config="config.driver.sci_i2c" display="Driver|Connectivity|${module.driver.i2c.name} I2C Driver on r_sci_i2c" id="module.driver.i2c_on_sci_i2c" version="1">
        <constraint display="Requires one SCI Common Driver instance">
            "${interface.driver.sci_common}" === "1"
        </constraint>
		<constraint display="Requires I2C mode to be enabled in SCI Common">
           "${config.driver.sci_common.i2c}" != "config.driver.sci_common.i2c.disabled"
        </constraint>
        <constraint display="Requires SCI${module.driver.i2c.channel} Receive Interrupt (RXI) enabled">
            "${board.icu.sci.sci${module.driver.i2c.channel}.rxi}" != "board.icu.common.irq.disabled"
        </constraint>
        <constraint display="Requires SCI${module.driver.i2c.channel} Transmit Interrupt (TXI) enabled">
            "${board.icu.sci.sci${module.driver.i2c.channel}.txi}" != "board.icu.common.irq.disabled"
        </constraint>
		<constraint display="Requires SCI${module.driver.i2c.channel} Transmit End Interrupt (TEI) enabled">
            "${board.icu.sci.sci${module.driver.i2c.channel}.tei}" != "board.icu.common.irq.disabled"
        </constraint>
        <constraint display="Requires SCI${module.driver.i2c.channel} Error Interrupt (ERI) enabled">
            "${board.icu.sci.sci${module.driver.i2c.channel}.eri}" != "board.icu.common.irq.disabled"
       </constraint> 
		<constraint display="Unique name required for each instance">
            "${interface.driver.i2c.${module.driver.i2c.name}}" === "1"
	    </constraint>
        <requires id="module.driver.i2c_on_sci_i2c.requires.sci_common" interface="interface.driver.sci_common" display="Add SCI Common" />
        <provides interface="interface.driver.i2c" />
        <provides interface="interface.driver.i2c_on_sci_i2c" />
        <provides interface="interface.driver.i2c.${module.driver.i2c.name}" />
        <property default="g_i2c${_instance}" display="Name" id="module.driver.i2c.name">
			<constraint display="Name must be a valid C symbol">testSymbol("${module.driver.i2c.name}")</constraint>
        </property>
		<property default="0" display="Channel" id="module.driver.i2c.channel">
			<constraint display="Value must be an integer between 0 and 9">testInteger("${module.driver.i2c.channel}")  &amp;&amp; ("${module.driver.i2c.channel}" &gt;= 0) &amp;&amp; ("${module.driver.i2c.channel}" &lt;= 9)</constraint>
		</property>
		<property default="module.driver.i2c.rate.rate_standard" display="Rate" id="module.driver.i2c.rate">
			<option display="Standard" id="module.driver.i2c.rate.rate_standard" value="I2C_RATE_STANDARD"/>
			<option display="Fast-mode" id="module.driver.i2c.rate.rate_fast" value="I2C_RATE_FAST"/>
		</property>
		<property default="0x00" display="Slave Address " id="module.driver.i2c.slave">
			<constraint display="Value must be a hex value">testInteger("${module.driver.i2c.slave}")  &amp;&amp; ("${module.driver.i2c.slave}" &gt;= 0)</constraint>
        </property>
		<property default="module.driver.i2c.addr_mode.addr_mode_7bit" display="Address Mode" id="module.driver.i2c.addr_mode">
			<option display="7-Bit" id="module.driver.i2c.addr_mode.addr_mode_7bit" value="I2C_ADDR_MODE_7BIT"/>
			<option display="10-Bit" id="module.driver.i2c.addr_mode.addr_mode_10bit" value="I2C_ADDR_MODE_10BIT"/>
		</property>
        <property default="NULL" display="Callback" id="module.driver.i2c.p_callback">
			<constraint display="Name must be a valid C symbol">testSymbol("${module.driver.i2c.p_callback}")</constraint>
        </property>
        <interrupt node="board.icu.sci.sci${module.driver.i2c.channel}.rxi" />
        <interrupt node="board.icu.sci.sci${module.driver.i2c.channel}.txi" />
        <interrupt node="board.icu.sci.sci${module.driver.i2c.channel}.tei" />
        <interrupt node="board.icu.sci.sci${module.driver.i2c.channel}.eri" />
        <header>
		extern const i2c_cfg_t ${module.driver.i2c.name}_cfg;
            /** I2C on SCI Instance. */
            extern const i2c_master_instance_t ${module.driver.i2c.name};
#ifdef ${module.driver.i2c.p_callback}
#define I2C_ON_SCI_CALLBACK_USED_${module.driver.i2c.name} (0)
#else
#define I2C_ON_SCI_CALLBACK_USED_${module.driver.i2c.name} (1)
#endif
#if I2C_ON_SCI_CALLBACK_USED_${module.driver.i2c.name}
void ${module.driver.i2c.p_callback}(i2c_callback_args_t * p_args);
#endif
        </header>
		<includes>
#include &quot;r_sci_i2c.h&quot;
#include &quot;r_i2c_api.h&quot;</includes>
		<declarations>
#if I2C_ON_SCI_CALLBACK_USED_${module.driver.i2c.name}
#if defined(__ICCARM__)
#define ${module.driver.i2c.p_callback}_WEAK_ATTRIBUTE
#pragma weak ${module.driver.i2c.p_callback}                            = ${module.driver.i2c.p_callback}_internal
#elif defined(__GNUC__)
#define ${module.driver.i2c.p_callback}_WEAK_ATTRIBUTE       __attribute__ ((weak, alias("${module.driver.i2c.p_callback}_internal")))
#endif
void ${module.driver.i2c.p_callback}(i2c_callback_args_t * p_args) ${module.driver.i2c.p_callback}_WEAK_ATTRIBUTE;
#endif
i2c_ctrl_t ${module.driver.i2c.name}_ctrl;
const i2c_cfg_t ${module.driver.i2c.name}_cfg =
{
    .channel             = ${module.driver.i2c.channel},
    .rate                = ${module.driver.i2c.rate},
    .slave               = ${module.driver.i2c.slave},
    .addr_mode           = ${module.driver.i2c.addr_mode},
	.p_callback          = ${module.driver.i2c.p_callback},
	.p_context           = (void *)&amp;${module.driver.i2c.name},
};
/* Instance structure to use this module. */
const i2c_master_instance_t ${module.driver.i2c.name} = 
{
    .p_ctrl        = &amp;${module.driver.i2c.name}_ctrl,
    .p_cfg         = &amp;${module.driver.i2c.name}_cfg,
    .p_api         = &amp;g_i2c_master_on_sci
};

#if I2C_ON_SCI_CALLBACK_USED_${module.driver.i2c.name}
/*******************************************************************************************************************//**
 * @brief      This is a weak example callback function.  It should be overridden by defining a user callback function 
 *             with the prototype below.
 *               - void ${module.driver.i2c.p_callback}(i2c_callback_args_t * p_args)
 *
 * @param[in]  p_args  Callback arguments used to identify what caused the callback.
 **********************************************************************************************************************/
void ${module.driver.i2c.p_callback}_internal(i2c_callback_args_t * p_args);
void ${module.driver.i2c.p_callback}_internal(i2c_callback_args_t * p_args)
{
	/** Do nothing. */
	SSP_PARAMETER_NOT_USED(p_args);
}
#endif
</declarations>
	</module>
</synergyModuleDescription>
