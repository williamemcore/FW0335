<?xml version="1.0" ?>
<synergyModuleDescription>
    <config id="config.driver.sci_uart" path="ssp_cfg/driver/r_sci_uart_cfg.h" version="0">
        <property default="config.driver.sci_uart.external_rts_operation.disabled" display="External RTS Operation" id="config.driver.sci_uart.external_rts_operation">
            <option display="Enable" id="config.driver.sci_uart.external_rts_operation.enabled" value="(1)"/>
            <option display="Disable" id="config.driver.sci_uart.external_rts_operation.disabled" value="(0)"/>
        </property>
        <property default="config.driver.sci_uart.uart_rx_enable.enabled" display="Reception" id="config.driver.sci_uart.uart_rx_enable">
            <option display="Enable" id="config.driver.sci_uart.uart_rx_enable.enabled" value="(1)"/>
            <option display="Disable" id="config.driver.sci_uart.uart_rx_enable.disabled" value="(0)"/>
        </property>
        <property default="config.driver.sci_uart.uart_tx_enable.enabled" display="Transmission" id="config.driver.sci_uart.uart_tx_enable">
            <option display="Enable" id="config.driver.sci_uart.uart_tx_enable.enabled" value="(1)"/>
            <option display="Disable" id="config.driver.sci_uart.uart_tx_enable.disabled" value="(0)"/>
        </property>
        <property default="config.driver.sci_uart.param_checking_enable.bsp" display="Parameter Checking" id="config.driver.sci_uart.param_checking_enable">
            <option display="Default (BSP)" id="config.driver.sci_uart.param_checking_enable.bsp" value="(BSP_CFG_PARAM_CHECKING_ENABLE)"/>
            <option display="Enabled" id="config.driver.sci_uart.param_checking_enable.enabled" value="(1)"/>
            <option display="Disabled" id="config.driver.sci_uart.param_checking_enable.disabled" value="(0)"/>
        </property>
        <content>#define SCI_UART_CFG_EXTERNAL_RTS_OPERATION ${config.driver.sci_uart.external_rts_operation}
            #define SCI_UART_CFG_RX_ENABLE ${config.driver.sci_uart.uart_rx_enable}
            #define SCI_UART_CFG_TX_ENABLE ${config.driver.sci_uart.uart_tx_enable}
            #define SCI_UART_CFG_PARAM_CHECKING_ENABLE ${config.driver.sci_uart.param_checking_enable}
        </content>
    </config>
    <module config="config.driver.sci_uart" display="Driver|Connectivity|${module.driver.uart.name} UART Driver on r_sci_uart" id="module.driver.uart_on_sci_uart" version="1">
		<constraint display="Requires Asynchronous Mode mode to be enabled in SCI Common">
           "${config.driver.sci_common.async}" != "config.driver.sci_common.async.disabled"
        </constraint>
        <constraint display="Requires SCI${module.driver.uart.channel} Receive Interrupt (RXI) enabled">
            "${board.icu.sci.sci${module.driver.uart.channel}.rxi}" != "board.icu.common.irq.disabled"
        </constraint>
        <constraint display="Requires SCI${module.driver.uart.channel} Transmit Interrupt (TXI) enabled">
            "${board.icu.sci.sci${module.driver.uart.channel}.txi}" != "board.icu.common.irq.disabled"
        </constraint>
		<constraint display="Requires SCI${module.driver.uart.channel} Transmit End Interrupt (TEI) enabled">
            "${board.icu.sci.sci${module.driver.uart.channel}.tei}" != "board.icu.common.irq.disabled"
        </constraint>
        <constraint display="Requires SCI${module.driver.uart.channel} Error Interrupt (ERI) enabled">
            "${board.icu.sci.sci${module.driver.uart.channel}.eri}" != "board.icu.common.irq.disabled"
        </constraint>
        <constraint display="Receive Transfer cannot be used (must be NULL) if RTS callback is used">
            ("NULL" === "${module.driver.uart.callback.rts_pin_ctrl}") || (!testExists("${module.driver.uart_on_sci_uart.requires.transfer_rx::module.driver.transfer.name}"))
        </constraint>
		<constraint display="Unique name required for each instance">
            "${interface.driver.uart.${module.driver.uart.name}}" === "1"
	    </constraint>
        <requires id="module.driver.uart_on_sci_uart.requires.sci_common" interface="interface.driver.sci_common" display="Add SCI Common" />
		<requires id="module.driver.uart_on_sci_uart.requires.transfer_tx" interface="interface.driver.transfer_on_dtc" display="Add DTC Driver for Transmission [Recommended but optional]">
			<override property="module.driver.transfer.size" value="module.driver.transfer.size.size_1_byte"/>
			<override property="module.driver.transfer.mode" value="module.driver.transfer.mode.mode_normal"/>
			<override property="module.driver.transfer.dest_addr_mode" value="module.driver.transfer.dest_addr_mode.addr_mode_fixed"/>
			<override property="module.driver.transfer.src_addr_mode" value="module.driver.transfer.src_addr_mode.addr_mode_incremented"/>
			<override property="module.driver.transfer.repeat_area" value="module.driver.transfer.repeat_area.repeat_area_source"/>
			<override property="module.driver.transfer.p_dest" value="NULL"/>
			<override property="module.driver.transfer.p_src" value="NULL"/>
			<override property="module.driver.transfer.length" value="0"/>
			<override property="module.driver.transfer.interrupt" value="module.driver.transfer.interrupt.interrupt_end"/>
			<override property="module.driver.transfer.num_blocks" value="0"/>
			<override property="module.driver.transfer.auto_enable" value="module.driver.transfer.auto_enable.false"/>
			<override property="module.driver.transfer.p_callback" value="NULL"/>
			<override property="module.driver.transfer.activation_source" value="module.driver.transfer.event.event_sci${module.driver.uart.channel}_txi"/>
		</requires>
        <requires id="module.driver.uart_on_sci_uart.requires.transfer_rx" interface="interface.driver.transfer_on_dtc" display="Add DTC Driver for Reception [Recommended but optional]">
			<override property="module.driver.transfer.size" value="module.driver.transfer.size.size_1_byte"/>
			<override property="module.driver.transfer.mode" value="module.driver.transfer.mode.mode_normal"/>
			<override property="module.driver.transfer.dest_addr_mode" value="module.driver.transfer.dest_addr_mode.addr_mode_incremented"/>
			<override property="module.driver.transfer.src_addr_mode" value="module.driver.transfer.src_addr_mode.addr_mode_fixed"/>
			<override property="module.driver.transfer.repeat_area" value="module.driver.transfer.repeat_area.repeat_area_destination"/>
			<override property="module.driver.transfer.p_dest" value="NULL"/>
			<override property="module.driver.transfer.p_src" value="NULL"/>
			<override property="module.driver.transfer.length" value="0"/>
			<override property="module.driver.transfer.interrupt" value="module.driver.transfer.interrupt.interrupt_end"/>
			<override property="module.driver.transfer.num_blocks" value="0"/>
			<override property="module.driver.transfer.auto_enable" value="module.driver.transfer.auto_enable.false"/>
			<override property="module.driver.transfer.p_callback" value="NULL"/>
			<override property="module.driver.transfer.activation_source" value="module.driver.transfer.event.event_sci${module.driver.uart.channel}_rxi"/>
		</requires>		
        <provides interface="interface.driver.uart" />        
        <provides interface="interface.driver.uart_on_sci_uart" />
        <provides interface="interface.driver.uart.${module.driver.uart.name}" />
        <property default="g_uart${_instance}" display="Name" id="module.driver.uart.name">
            <constraint display="Name must be a valid C symbol">testSymbol("${module.driver.uart.name}")</constraint>
        </property>
        
        <!-- UART interface configuration -->
        <property default="0" display="Channel" id="module.driver.uart.channel">
            <constraint display="Value must be an integer between 0 and 9">testInteger("${module.driver.uart.channel}")  &amp;&amp; ("${module.driver.uart.channel}" &gt;= 0) &amp;&amp; ("${module.driver.uart.channel}" &lt; 10)</constraint>
        </property>
        <property default="9600" display="Baud Rate" id="module.driver.uart.baud_rate">
            <constraint display="Value must be an integer">testInteger("${module.driver.uart.baud_rate}")</constraint>
        </property>
        <property default="module.driver.uart.data_bits.data_bits_8" display="Data Bits" id="module.driver.uart.data_bits">
            <option display="8bits" id="module.driver.uart.data_bits.data_bits_8" value="UART_DATA_BITS_8"/>
            <option display="7bits" id="module.driver.uart.data_bits.data_bits_7" value="UART_DATA_BITS_7"/>
            <option display="9bits" id="module.driver.uart.data_bits.data_bits_9" value="UART_DATA_BITS_9"/>
        </property>
        <property default="module.driver.uart.parity.parity_off" display="Parity" id="module.driver.uart.parity">
            <option display="None" id="module.driver.uart.parity.parity_off" value="UART_PARITY_OFF"/>
            <option display="Odd" id="module.driver.uart.parity.parity_odd" value="UART_PARITY_ODD"/>
            <option display="Even" id="module.driver.uart.parity.parity_even" value="UART_PARITY_EVEN"/>
        </property>
        <property default="module.driver.uart.stop_bits.stop_bits_1" display="Stop Bits" id="module.driver.uart.stop_bits">
            <option display="1bit" id="module.driver.uart.stop_bits.stop_bits_1" value="UART_STOP_BITS_1"/>
            <option display="2bits" id="module.driver.uart.stop_bits.stop_bits_2" value="UART_STOP_BITS_2"/>
        </property>
        <property default="module.driver.uart.ctsrts_en.false" display="CTS/RTS Selection" id="module.driver.uart.ctsrts_en">
            <option display="CTS (Note that RTS is available when enabling External RTS Operation mode which uses 1 GPIO pin)" id="module.driver.uart.ctsrts_en.true" value="true"/>
            <option display="RTS (CTS is disabled)" id="module.driver.uart.ctsrts_en.false" value="false"/>
        </property>

        <!-- External defined callback function -->
        <property default="user_uart_callback" display="Name of UART callback function to be defined by user" id="module.driver.uart.callback">
            <constraint display="Name must be a valid C symbol">testSymbol("${module.driver.uart.callback}")</constraint>
        </property>
        <property default="NULL" display="Name of UART callback function for the RTS external pin control to be defined by user" id="module.driver.uart.callback.rts_pin_ctrl">
            <constraint display="Name must be a valid C symbol">testSymbol("${module.driver.uart.callback.rts_pin_ctrl}")</constraint>
        </property>

        <!-- UART Extended configuration -->
        <property default="module.driver.uart.clk_src.int_clk" display="Clock Source" id="module.driver.uart.clk_src">
            <option display="Internal Clock" id="module.driver.uart.clk_src.int_clk" value="SCI_CLK_SRC_INT"/>
            <option display="External Clock 8x baudrate" id="module.driver.uart.clk_src.ext_clk_8x" value="SCI_CLK_SRC_EXT8X"/>
            <option display="External Clock 16x baudrate" id="module.driver.uart.clk_src.ext_clk_16x" value="SCI_CLK_SRC_EXT16X"/>
        </property>
        <property default="module.driver.uart.baudclk_out.false" display="Baudrate Clock Output from SCK pin" id="module.driver.uart.baudclk_out">
            <option display="Enable" id="module.driver.uart.baudclk_out.true" value="true"/>
            <option display="Disable" id="module.driver.uart.baudclk_out.false" value="false"/>
        </property>
        <property default="module.driver.uart.rx_edge_start.true" display="Start bit detection" id="module.driver.uart.rx_edge_start">
            <option display="Falling Edge" id="module.driver.uart.rx_edge_start.true" value="true"/>
            <option display="Low Level" id="module.driver.uart.rx_edge_start.false" value="false"/>
        </property>
        <property default="module.driver.uart.noisecancel_en.false" display="Noise Cancel" id="module.driver.uart.noisecancel_en">
            <option display="Enable" id="module.driver.uart.noisecancel_en.true" value="true"/>
            <option display="Disable" id="module.driver.uart.noisecancel_en.false" value="false"/>
        </property>

        <interrupt node="board.icu.sci.sci${module.driver.uart.channel}.rxi" />
        <interrupt node="board.icu.sci.sci${module.driver.uart.channel}.txi" />
        <interrupt node="board.icu.sci.sci${module.driver.uart.channel}.tei" />
        <interrupt node="board.icu.sci.sci${module.driver.uart.channel}.eri" />

        <header>
            /** UART on SCI Instance. */
            extern const uart_instance_t      ${module.driver.uart.name};
            #ifdef ${module.driver.uart.callback.rts_pin_ctrl}
            #else
            extern void             ${module.driver.uart.callback.rts_pin_ctrl} (uint32_t channel, uint32_t level);
            #endif
#ifdef ${module.driver.uart.callback}
#define UART_ON_SCI_UART_CALLBACK_USED_${module.driver.uart.name} (0)
#else
#define UART_ON_SCI_UART_CALLBACK_USED_${module.driver.uart.name} (1)
#endif
#if UART_ON_SCI_UART_CALLBACK_USED_${module.driver.uart.name}
void ${module.driver.uart.callback}(uart_callback_args_t * p_args);
#endif
        </header>
        <includes>
            #include &quot;r_sci_uart.h&quot;
            #include &quot;r_uart_api.h&quot;
        </includes>
        <declarations>
#if UART_ON_SCI_UART_CALLBACK_USED_${module.driver.uart.name}
#if defined(__ICCARM__)
#define ${module.driver.uart.callback}_WEAK_ATTRIBUTE
#pragma weak ${module.driver.uart.callback}  = ${module.driver.uart.callback}_internal
#elif defined(__GNUC__)
#define ${module.driver.uart.callback}_WEAK_ATTRIBUTE   __attribute__ ((weak, alias("${module.driver.uart.callback}_internal")))
#endif
void ${module.driver.uart.callback}(uart_callback_args_t * p_args) ${module.driver.uart.callback}_WEAK_ATTRIBUTE;
#endif

            uart_ctrl_t     ${module.driver.uart.name}_ctrl;

            /** UART extended configuration for UARTonSCI HAL driver */
            const uart_on_sci_cfg_t ${module.driver.uart.name}_cfg_extend =
            {
                .clk_src             = ${module.driver.uart.clk_src},
                .baudclk_out         = ${module.driver.uart.baudclk_out},
                .rx_edge_start       = ${module.driver.uart.rx_edge_start},
                .noisecancel_en      = ${module.driver.uart.noisecancel_en},
                .p_extpin_ctrl       = (void *)${module.driver.uart.callback.rts_pin_ctrl}
            };

            /** UART interface configuration */
            const uart_cfg_t ${module.driver.uart.name}_cfg =
            {
                .channel             = ${module.driver.uart.channel},
                .baud_rate           = ${module.driver.uart.baud_rate},
                .data_bits           = ${module.driver.uart.data_bits},
                .parity              = ${module.driver.uart.parity},
                .stop_bits           = ${module.driver.uart.stop_bits},
                .ctsrts_en           = ${module.driver.uart.ctsrts_en},
                .p_callback          = ${module.driver.uart.callback},
                .p_context           = &amp;${module.driver.uart.name},
                .p_extend            = &amp;${module.driver.uart.name}_cfg_extend,
#define SYNERGY_NOT_DEFINED (1)                        
#if (SYNERGY_NOT_DEFINED == ${module.driver.uart_on_sci_uart.requires.transfer_tx::module.driver.transfer.name})
                .p_transfer_tx       = NULL,
#else
                .p_transfer_tx       = &amp;${module.driver.uart_on_sci_uart.requires.transfer_tx::module.driver.transfer.name},
#endif            
#if (SYNERGY_NOT_DEFINED == ${module.driver.uart_on_sci_uart.requires.transfer_rx::module.driver.transfer.name})
                .p_transfer_rx       = NULL,
#else
                .p_transfer_rx       = &amp;${module.driver.uart_on_sci_uart.requires.transfer_rx::module.driver.transfer.name},
#endif   
#undef SYNERGY_NOT_DEFINED            
            };

/* Instance structure to use this module. */
const uart_instance_t ${module.driver.uart.name} = 
{
    .p_ctrl        = &amp;${module.driver.uart.name}_ctrl,
    .p_cfg         = &amp;${module.driver.uart.name}_cfg,
    .p_api         = &amp;g_uart_on_sci
};            

#if UART_ON_SCI_UART_CALLBACK_USED_${module.driver.uart.name}
/*******************************************************************************************************************//**
 * @brief      This is a weak example callback function.  It should be overridden by defining a user callback function 
 *             with the prototype below.
 *               - void ${module.driver.uart.callback}(uart_callback_args_t * p_args)
 *
 * @param[in]  p_args  Callback arguments used to identify what caused the callback.
 **********************************************************************************************************************/
void ${module.driver.uart.callback}_internal(uart_callback_args_t * p_args);
void ${module.driver.uart.callback}_internal(uart_callback_args_t * p_args)
{
    /** Do nothing. */
    SSP_PARAMETER_NOT_USED(p_args);
}
#endif
        </declarations>
    </module>
</synergyModuleDescription>
